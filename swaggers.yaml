openapi: 3.0.0
info:
  title: API de Gestion des Utilisateurs
  version: 1.0.0
  description: API permettant de créer un compte utilisateur.

paths:
  /api/v1/register:
    post:
      summary: Créer un nouveau compte utilisateur
      tags:
        - Utilisateurs
      requestBody:
        description: Données nécessaires pour créer un nouveau compte utilisateur.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Adresse email de l'utilisateur.
                  example: "johndoe@example.com"
                password:
                  type: string
                  format: password
                  description: Mot de passe de l'utilisateur.
                  example: "Passw0rd!"
                confirm_password:
                  type: string
                  format: password
                  description: Mot de passe de l'utilisateur.
                  example: "Passw0rd!"
                firstName:
                  type: string
                  description: Prénom de l'utilisateur.
                  example: "John"
                lastName:
                  type: string
                  description: Nom de famille de l'utilisateur.
                  example: "Doe"
                role:
                  type: string
                  description: Role de l'utilisateur.
                  example: "Doe"
                phone:
                  type: string
                  description: Téléphone de l'utilisateur.
                  example: "+1 123-456-7890"
                city:
                  type: string
                  description: Ville de l'utilisateur.
                  example: "New York"
                picture:
                  type: string
                  description: Chemin d'accès à l'image de l'utilisateur.
                identifiant:
                  type: string
                  description: Identifiant unique de l'utilisateur.
                  example: "john_doe"
      responses:
        '201':
          description: Compte utilisateur créé avec succès.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Compte utilisateur créé avec succès."
                  status:
                    type: string
                    example: "Valider"
        '400':
          description: Requête invalide (données manquantes ou incorrectes).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Les données fournies sont invalides."
        '409':
          description: Conflit - Nom d'utilisateur ou email déjà utilisé.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nom d'utilisateur ou email déjà utilisé."
        '500':
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Une erreur interne s'est produite."
  
  /api/v1/tailleur/status:
    get:
      summary: "Liste les statuts de l'utilisateur connecté"
      description: "Récupère les statuts actifs pour le tailleur ou client connecté."
      tags:
        - Status
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Liste des statuts retournée avec succès"
        "400":
          description: "ID utilisateur invalide"
        "404":
          description: "Compte ou statut non trouvé"
        "500":
          description: "Erreur serveur"
    post:
      summary: "Crée un nouveau statut"
      description: "Permet à un tailleur de créer un nouveau statut."
      tags:
        - Status
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: string
                  description: "Le fichier associé au statut"
                  example: "example.mp4"
                description:
                  type: string
                  description: "Description du statut"
                  example: "Model du jour"
                categories:
                  type: string
                  description: "Catégorie du statut"
                  example: "video"
      responses:
        "201":
          description: "Statut créé avec succès"
        "500":
          description: "Erreur serveur"

  /api/v1/tailleur/posts:
    get:
      summary: "Liste tous les posts de l'utilisateur connecté"
      description: "Récupère les posts du tailleur connecté, ainsi que ceux des tailleurs qu'il suit."
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Liste des posts retournée avec succès"
        "400":
          description: "ID utilisateur invalide"
        "404":
          description: "Compte ou post non trouvé"
        "500":
          description: "Erreur serveur"
    post:
      summary: "Crée un nouveau post"
      description: "Permet à un tailleur de créer un nouveau post."
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: "Contenu du post"
                  example: "Ceci est un exemple de post."
                title:
                  type: string
                  description: "Titre du post"
                  example: "Nouveau design"
                image:
                  type: array
                  items:
                    type: string
                  description: "Images associées au post"
                  example: ["image1.jpg", "image2.jpg"]
                tissus:
                  type: array
                  items:
                    type: object
                    properties:
                      prixMetre:
                        type: number
                        example: 10
                      nombreMetre:
                        type: number
                        example: 5
                      tissu_id:
                        type: string
                        example: "60f7a1f3e4b0a45f7c6df1c8"
                useCredit:
                  type: boolean
                  description: "Utilisation de crédit"
                  example: true
      responses:
        "201":
          description: "Post créé avec succès"
        "400":
          description: "Données invalides"
        "404":
          description: "Compte ou tailleur non trouvé"
        "500":
          description: "Erreur serveur"

  /api/v1/tailleur/{postId}:
    put:
      summary: "Met à jour un post existant"
      description: "Permet à un tailleur de mettre à jour un post existant."
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: "ID du post à mettre à jour"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: "Nouveau contenu du post"
                  example: "Mise à jour du contenu"
                title:
                  type: string
                  description: "Nouveau titre du post"
                  example: "Nouveau titre"
                image:
                  type: array
                  items:
                    type: string
                  description: "Nouvelles images associées au post"
                  example: ["new_image1.jpg", "new_image2.jpg"]
                tissus:
                  type: array
                  items:
                    type: object
                    properties:
                      prixMetre:
                        type: number
                        example: 15
                      nombreMetre:
                        type: number
                        example: 7
                      tissu_id:
                        type: string
                        example: "60f7a1f3e4b0a45f7c6df1c8"
      responses:
        "200":
          description: "Post mis à jour avec succès"
        "400":
          description: "Données invalides"
        "404":
          description: "Post non trouvé"
        "500":
          description: "Erreur serveur"
    delete:
      summary: "Supprime un post existant"
      description: "Permet à un tailleur de supprimer un post existant."
      tags:
        - Posts
      parameters:
        - in: path
          name: postId
          schema:
            type: string
          required: true
          description: "ID du post à supprimer"
      responses:
        "200":
          description: "Post supprimé avec succès"
        "404":
          description: "Post non trouvé"
        "500":
          description: "Erreur serveur"

  /api/v1/tailleur/achetercredit:
    post:
      summary: "Acheter du crédit"
      description: "Permet à un tailleur d'acheter du crédit."
      tags:
        - Crédit
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                montant:
                  type: number
                  description: "Montant de crédit à acheter"
                  example: 100
      responses:
        "201":
          description: "Crédit acheté avec succès"
        "400":
          description: "Données invalides"
        "500":
          description: "Erreur serveur"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT